// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NCS.DSS.Collections.SysIntTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AzureSearch")]
    public partial class AzureSearchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AzureSearch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AzureSearch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoaderRef",
                        "Title",
                        "GivenName",
                        "FamilyName",
                        "DateofBirth",
                        "DateOfRegistration",
                        "UniqueLearnerNumber",
                        "OptInUserResearch",
                        "OptInMarketResearch",
                        "DateOfTermination",
                        "ReasonForTermination",
                        "IntroducedBy",
                        "IntroducedByAdditionalInfo",
                        "LastModifiedDate"});
            table1.AddRow(new string[] {
                        "BOB",
                        "4",
                        "BOBRON",
                        "Surname[FEATURE_TS]",
                        "Today -18Y +1D",
                        "Now -3D",
                        "9999900001",
                        "true",
                        "false",
                        "",
                        "",
                        "1",
                        "ZZ_TESTDATA_ANON",
                        "2019-01-17T00:00:00Z"});
#line 4
 testRunner.Given("I load test customer data for this feature:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoaderRef",
                        "Address1",
                        "Address2",
                        "Address3",
                        "Address4",
                        "Address5",
                        "PostCode",
                        "AlternativePostCode",
                        "Longitude",
                        "Latitude",
                        "EffectiveFrom",
                        "EffectiveTo",
                        "LastModifiedDate",
                        "LastModifiedTouchpointId"});
            table2.AddRow(new string[] {
                        "BOB",
                        "6 Lake Street",
                        "North Walsham",
                        "",
                        "",
                        "",
                        "B44 9UX",
                        "EC2P 2AG",
                        "",
                        "",
                        "",
                        "",
                        "2019-01-23T00:00:00Z",
                        "90000001"});
#line 9
 testRunner.Given("I load test address data for this feature:", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoaderRef",
                        "PreferredContactMethod",
                        "MobileNumber",
                        "HomeNumber",
                        "AlternativeNumber",
                        "EmailAddress",
                        "LastModifiedDate",
                        "LastModifiedTouchpointId"});
            table3.AddRow(new string[] {
                        "BOB",
                        "4",
                        "07484503700",
                        "05100924950",
                        "08483057675",
                        "email2@domain2.test",
                        "2019-01-23T00:00:00Z",
                        "90000001"});
#line 14
  testRunner.Given("I load test contact data for this feature:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoaderRef",
                        "TouchpointId",
                        "AdviserDetailsId",
                        "DateandTimeOfInteraction",
                        "Channel",
                        "InteractionType",
                        "LastModifiedDate",
                        "LastModifiedTouchpointId"});
            table4.AddRow(new string[] {
                        "BOB",
                        "4",
                        "bb940afb-1423-4999-a234-5a64a5c00831",
                        "2019-01-23T00:00:00Z",
                        "1",
                        "3",
                        "2019-01-23T00:00:00Z",
                        "90000001"});
            table4.AddRow(new string[] {
                        "BOB",
                        "4",
                        "bb940afb-1423-4999-a234-5a64a5c00831",
                        "2019-01-23T00:00:00Z",
                        "2",
                        "3",
                        "2019-01-23T00:00:00Z",
                        "90000001"});
#line 19
 testRunner.Given("I load test interaction data for this feature", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoaderRef",
                        "ParentRef",
                        "DateandTimeOfSession",
                        "VenuePostCode",
                        "SessionAttended",
                        "ReasonForNonAttendance",
                        "LastModifiedDate",
                        "LastModifiedTouchpointId"});
            table5.AddRow(new string[] {
                        "BOB",
                        "1",
                        "2018-06-21T14:45:00Z",
                        "NE9 7RG",
                        "true",
                        "",
                        "2019-01-23T00:00:00Z",
                        "90000001"});
            table5.AddRow(new string[] {
                        "BOB",
                        "2",
                        "2018-06-21T14:45:00Z",
                        "NE9 7RG",
                        "false",
                        "1",
                        "2019-01-23T00:00:00Z",
                        "90000001"});
#line 25
 testRunner.Given("I load test session data for the feature", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoaderRef",
                        "ParentRef",
                        "DateActionPlanCreated",
                        "CustomerCharterShownToCustomer",
                        "DateAndTimeCharterShown",
                        "DateActionPlanSentToCustomer",
                        "ActionPlanDeliveryMethod",
                        "DateActionPlanAcknowledged",
                        "PriorityCustomer",
                        "CurrentSituation"});
            table6.AddRow(new string[] {
                        "BOB",
                        "1",
                        "2018-07-30T09:00:00Z",
                        "true",
                        "2018-07-30T09:00:00Z",
                        "2018-07-30T09:00:00Z",
                        "1",
                        "2018-07-30T09:00:00Z",
                        "1",
                        "looking for work"});
#line 31
 testRunner.Given("I load action plan data for the feature", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoaderRef",
                        "ParentRef",
                        "DateActionAgreed",
                        "DateActionAimsToBeCompletedBy",
                        "ActionSummary",
                        "SignpostedTo",
                        "ActionType",
                        "ActionStatus",
                        "PersonResponsible",
                        "LastModifiedDate"});
            table7.AddRow(new string[] {
                        "BOB",
                        "1",
                        "2018-07-30T09:00:00Z",
                        "2018-08-08T09:00:00Z",
                        "Details of stuff",
                        "Someone",
                        "1",
                        "1",
                        "1",
                        "2018-07-30T09:00:00Z"});
#line 36
 testRunner.Given("I load action data for the feature", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoaderRef",
                        "ParentRef",
                        "OutcomeType",
                        "OutcomeClaimedDate",
                        "OutcomeEffectiveDate"});
            table8.AddRow(new string[] {
                        "BOB",
                        "1",
                        "3",
                        "2018-07-20T21:45:00Z",
                        "2018-07-20T21:45:00Z"});
#line 41
 testRunner.Given("I load outcome data for the feature", ((string)(null)), table8, "Given ");
#line 45
 testRunner.Given("I have completed loading data and don\'t want to repeat for each test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.And("I have confirmed all test data is now in the backup data store", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Synonym name search for Aaron")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SynonymNameSearchForAaron()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Synonym name search for Aaron", null, new string[] {
                        "mytag"});
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "SearchTerm",
                        "Value"});
            table9.AddRow(new string[] {
                        "GivenName",
                        "erin"});
            table9.AddRow(new string[] {
                        "FamilyName",
                        "O\'Connors"});
#line 57
 testRunner.Given("I enter a search with the following terms", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "FilterTerm",
                        "Value"});
            table10.AddRow(new string[] {
                        "DateofBirth",
                        "eq 1953-02-13T00:00:00Z"});
#line 61
 testRunner.And("I filter the results as follows", ((string)(null)), table10, "And ");
#line 64
 testRunner.When("I submit the search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value1",
                        "Value2"});
            table11.AddRow(new string[] {
                        "Aaron",
                        "Erin"});
#line 66
 testRunner.And("the response should include \"GivenName\" matches for:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "FieldName",
                        "Value"});
            table12.AddRow(new string[] {
                        "DateofBirth",
                        "1953-02-13T00:00:00Z"});
#line 69
 testRunner.And("the response should include results for:", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Synonym name search for Ronnie")]
        public virtual void SynonymNameSearchForRonnie()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Synonym name search for Ronnie", null, ((string[])(null)));
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "SearchTerm",
                        "Value"});
            table13.AddRow(new string[] {
                        "GivenName",
                        "Ronnie"});
#line 74
 testRunner.Given("I enter a search with the following terms", ((string)(null)), table13, "Given ");
#line 77
 testRunner.When("I submit the search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value1",
                        "Value2",
                        "Value3",
                        "Value4",
                        "Value5"});
            table14.AddRow(new string[] {
                        "Aaron",
                        "Ron",
                        "Veronica",
                        "Cameron",
                        "RONALD"});
#line 79
 testRunner.And("the response should include \"GivenName\" matches for:", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Synonym name search for Peter")]
        public virtual void SynonymNameSearchForPeter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Synonym name search for Peter", null, ((string[])(null)));
#line 83
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "SearchTerm",
                        "Value"});
            table15.AddRow(new string[] {
                        "GivenName",
                        "Peter"});
#line 84
 testRunner.Given("I enter a search with the following terms", ((string)(null)), table15, "Given ");
#line 87
 testRunner.When("I submit the search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value1",
                        "Value2",
                        "Value3",
                        "Value4",
                        "Value5"});
            table16.AddRow(new string[] {
                        "Aaron",
                        "Ron",
                        "Veronica",
                        "Cameron",
                        "RONALD"});
#line 89
 testRunner.And("the response should include \"GivenName\" matches for:", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with OR")]
        public virtual void SearchWithOR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with OR", null, ((string[])(null)));
#line 93
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with AND")]
        public virtual void SearchWithAND()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with AND", null, ((string[])(null)));
#line 95
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Restrict search results")]
        public virtual void RestrictSearchResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Restrict search results", null, ((string[])(null)));
#line 97
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "SearchTerm",
                        "Value"});
            table17.AddRow(new string[] {
                        "FamilyName",
                        "SM*"});
#line 98
 testRunner.Given("I enter a search with the following terms", ((string)(null)), table17, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field1",
                        "Field2",
                        "Field3",
                        "Field4"});
            table18.AddRow(new string[] {
                        "CustomerId",
                        "GivenName",
                        "FamilyName",
                        "DateofBirth"});
#line 101
 testRunner.And("I restrict the returned fields to", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "FilterTerm",
                        "Value"});
            table19.AddRow(new string[] {
                        "DateofBirth",
                        "gt 1970-01-01"});
#line 104
 testRunner.And("I filter the results as follows", ((string)(null)), table19, "And ");
#line 107
 testRunner.When("I submit the search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field1",
                        "Field2",
                        "Field3",
                        "Field4"});
            table20.AddRow(new string[] {
                        "CustomerId",
                        "GivenName",
                        "FamilyName",
                        "DateofBirth"});
#line 109
 testRunner.And("The response includes values for", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field1",
                        "Field2",
                        "Field3",
                        "Field4",
                        "Field5",
                        "Field6",
                        "Field7",
                        "Field8",
                        "Field9",
                        "Field10",
                        "Field11"});
            table21.AddRow(new string[] {
                        "DateOfRegistration",
                        "Title",
                        "UniqueLearnerNumber",
                        "Gender",
                        "OptInUserResearch",
                        "OptInMarketResearch",
                        "DateOfTermination",
                        "IntroducedBy",
                        "IntroducedByAdditionalInfo",
                        "LastModifiedDate",
                        "LastModifiedTouchpointID"});
#line 112
 testRunner.And("The response includes no values for", ((string)(null)), table21, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View 1st page of paginated results")]
        public virtual void View1StPageOfPaginatedResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View 1st page of paginated results", null, ((string[])(null)));
#line 117
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "SearchTerm",
                        "Value"});
            table22.AddRow(new string[] {
                        "FamilyName",
                        "SM*"});
#line 118
 testRunner.Given("I enter a search with the following terms", ((string)(null)), table22, "Given ");
#line 121
    testRunner.And("I request a count of records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("I request a page limit of 10 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.When("I request page 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 125
 testRunner.And("the number of records returned should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View 2nd page of paginated results")]
        public virtual void View2NdPageOfPaginatedResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View 2nd page of paginated results", null, ((string[])(null)));
#line 127
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "SearchTerm",
                        "Value"});
            table23.AddRow(new string[] {
                        "FamilyName",
                        "SM*"});
#line 128
 testRunner.Given("I enter a search with the following terms", ((string)(null)), table23, "Given ");
#line 131
    testRunner.And("I request a count of records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.And("I request a page limit of 10 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.And("I request page 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.And("I remember the records returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.When("I request page 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 137
 testRunner.And("the number of records returned should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.And("the records should not include the ealier results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View last page of paginated results")]
        public virtual void ViewLastPageOfPaginatedResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View last page of paginated results", null, ((string[])(null)));
#line 140
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "SearchTerm",
                        "Value"});
            table24.AddRow(new string[] {
                        "FamilyName",
                        "SM*"});
#line 141
 testRunner.Given("I enter a search with the following terms", ((string)(null)), table24, "Given ");
#line 144
    testRunner.And("I request a count of records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And("I request a page limit of 10 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.And("I request page 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("I remember the records returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("I request page 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("I remember the records returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.When("I request the last page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
 testRunner.Then("there should be a 200 response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 152
 testRunner.Then("the remainder of the results are returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
 testRunner.And("the records should not include the ealier results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
